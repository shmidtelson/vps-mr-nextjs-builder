name: PR Deployment to VPS

on:
  pull_request:
    types: [ opened, synchronize ] # Trigger on PR open, sync, and close
  workflow_run:
    workflows: ["Remove deploy", "Deploy"]
    types:
      - completed

jobs:
  set_env:
    runs-on: ubuntu-latest
    steps:
      - name: Set Domain Secret
        run: echo "DOMAIN_ADDRESS=${{ secrets.DOMAIN_ADDRESS }}" >> $GITHUB_ENV
      - name: Set Subdomain
        run: echo "SUBDOMAIN=$GITHUB_SHA.${{ secrets.DOMAIN_ADDRESS }}" >> $GITHUB_ENV
      - name: Set URL
        run: echo "URL=https://$SUBDOMAIN" >> $GITHUB_ENV
      - name: Output URL
        run: echo "URL is $URL"
  deploy:
    runs-on: ubuntu-latest
    needs: [set_env]
    env:
      PATH_PM2: /root/.nvm/versions/node/v18.20.2/bin/pm2
      NPM: /root/.nvm/versions/node/v18.20.2/bin/npm
      PORT_NUMBER: $((10000 + RANDOM % 10001))
    environment:
      name: 'stage'
      url: ${{ env.URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: "${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}"
          restore-keys: |
            ${{ runner.os }}-node-

#      - name: Install Node.js
#        uses: actions/setup-node@v2
#        with:
#          node-version: '18'
#
#      - name: Install dependencies and build
#        run: |
#          npm install
#          npm run build

      - name: Copy project files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }} # Optional, default is 22
          source: "." # Source directory or file path
          target: "/home/frontend/${{ env.SUBDOMAIN }}" # Dynamic subdomain directory on VPS

      - name: SSH to VPS and Start Next.js app with PM2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/frontend/${{ env.SUBDOMAIN }}
            ${{ env.PATH_PM2 }} start ${{ env.NPM }} --name 'stage-nextjs-app-${{ github.sha }}' -- start -- --port ${{ env.PORT_NUMBER }}

      - name: Configure Nginx on VPS
        run: |
          # Remove existing NGINX config file
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} -p ${{ secrets.SSH_PORT }} "sudo rm /etc/nginx/sites-available/${{ env.SUBDOMAIN }}"
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} -p ${{ secrets.SSH_PORT }} "sudo rm /etc/nginx/sites-enabled/${{ env.SUBDOMAIN }}"
          # Create new NGINX config file
          cat << EOF | sudo tee /etc/nginx/sites-available/${{ env.SUBDOMAIN }}
          server {
              listen 443 ssl;
              server_name ${{ env.SUBDOMAIN }};
              ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
              ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
              location / {
                  proxy_pass http://localhost:${{ env.PORT_NUMBER }}; # Adjust this to match the port provided by PM2
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF
          # Enable NGINX config
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} -p ${{ secrets.SSH_PORT }} "sudo ln -s /etc/nginx/sites-available/${{ env.SUBDOMAIN }} /etc/nginx/sites-enabled/${{ env.SUBDOMAIN }}"
          # Restart NGINX
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} -p ${{ secrets.SSH_PORT }} "sudo nginx -t && sudo systemctl restart nginx"
